x
x<-data(mtcars$cyl)
data(mtcars)
x<-mtcars$cyl
makeVector(x)
x$mean
cl
cl()
cl
cs
cs()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
makeVector(x)
cachemean(x)
matrix_list<-list(a,b,c)
a<-matrix(1:9,3,3)
b<-matrix(9:1,3,3)
c<-matrix(1:4,2,2)
matrix_list<-list(a,b,c)
matrix_list
mean(x)
cachemean(x)
x<-vector("numeric",a:d)
x<-vector("numeric",1:5)
x<-vector("numeric",length=1:5)
x<-c(1:5)
x
cachemean(X)
cachemean(x)
makeVector(x)
cachemean(s)
cachemean(x)
ls()
rm(list=ls()
)
solve(matrix(1:4,2,2))
x<-matrix(1:4,2,2)
solve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(x=1:10)
makeVector(x=1:10)
View(x)
View(makeVector)
View(x)
View(makeVector)
aresult<-cachemean(1:15)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:10)
aresult<-cachemean(1:10)
cachemean(makeVector(1:15))
cachemean(makeVector(1:1000000))
cachemean(makeVector(1:100000000))
cachemean(makeVector(1:100000000))
cachemean(makeVector(1:100000000))
cachemean(makeVector(1:100000000))
cachemean(makeVector(1:1000000000))
cachemean(makeVector(1:1000000000))
cachemean(makeVector(1:1000000000))
cachemean(makeVector(1:10000000000))
View(makeVector)
View(cachemean)
cachemean(makeVector(1:4))
get()
a<-makeVector(1:4)
cachemean(a)
cachemean(a)
b<-a
b
cachemean(b)
a<1:100000000
a<-1:100000000
a<-makevector(1:100000000)
a<-makeVector(1:100000000)
cachemean(a)
cachemean(a)
cachemean(a)
b<-makeVector(2:2000000000)
cachemean(a)
cachemean(b)
b<-makeVector(2:20000000)
cachemean(b)
cachemean(a)
cachemean(b)
a<-1:10
cachemean(a)
source('C:/Users/Rafael Cardoso/Dropbox/Coursera/r-Programming/Week3/makeCacheMatrix.R')
source('C:/Users/Rafael Cardoso/Dropbox/Coursera/r-Programming/Week3/makeCacheMatrix.R')
source('C:/Users/Rafael Cardoso/Dropbox/Coursera/r-Programming/Week3/makeCacheMatrix.R')
makeCacheMatrix<-function(x){
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve<-functio(x){
s <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
cacheSolve<-functio(x){
s <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
##end of function
}
cacheSolve<-functio(x){
s <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
cacheSolve<-functio(x){
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- mean(data, ...)
x$setmean(s)
s
##end of function
}
cacheSolve<-functio(x){
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
cacheSolve<-function(x){
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
a<-matrix(1:100,10,10)
makeCacheMatrix(a)
cacheSolve(a)
a<-makeCacheMatrix(a)
cachesolve(a)
cacheSolve(a)
q
a
View(makeCacheMatrix)
data<-matrix(1:100,10,10)
a<-makeCacheMatrix(data)
cacheSolve(a)
cacheSolve<-function(x){
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setsolve(s)
s
}
cacheSolve(a)
a
cacheSolve<-function(x){
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(x)
x$setsolve(s)
s
}
cacheSolve(a)
makeCacheMatrix<-function(x=matrix()){
s<-NULL
Set<-function(y){
x<<-y
s<-NULL
##end of function Set
}
get<-function()
x
setsolve<-function(solve) s<<-solve
getsolve<-function() s
list(set=set,get=get,setsolve=setsolve,getsolve=getsolve)
##end of function
}
a<-makeCacheMatrix(1:100)
makeCacheMatrix<-function(x=matrix()){
s<-NULL
set<-function(y){
x<<-y
s<-NULL
##end of function Set
}
get<-function()
x
setsolve<-function(solve) s<<-solve
getsolve<-function() s
list(set=set,get=get,setsolve=setsolve,getsolve=getsolve)
##end of function
}
a<-makeCacheMatrix(1:100)
a
cacheSolve<-function(x,...){
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setsolve(s)
s
}
cacheSolve(A)
cacheSolve(a)
data<-matrix(1:9,3,3)
a<-makeCacheMatrix(data)
a
cacheSolve(a)
data<-matrix(rnorm(9,10),3,3)
data
a<-makeCacheMatrix(data)
cacheSolve(a)
cacheSolve(a)
b<-matrix(rnorm(16,10),4,4)
b
b<-makeCacheMatrix(matrix(rnorm(16,10),4,4))
cacheSolve(b)
cachesolve(a)
cacheSolve(a)
data<-matrix(rnorm(10000,10),100,100)
a<-makeCacheMatrix(data)
cacheSolve(a)
data<-matrix(rnorm(1000000,10),1000,1000)
a<-makeCacheMatrix(data)
cacheSolve(a)
cacheSolve(a)
View(cacheSolve)
View(cachemean)
View(cachemean)
setwd("C:/Users/Rafael Cardoso/Dropbox/Ufrgs/2017_01/")
load()
load("PosMatFunction.R")
rm(list=ls())
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL){
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL){
data<-read.csv("PossibMatric.CSV")
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
##End of fuction
}
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL){
data<-read.csv("PossibMatric.CSV")
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
##End of fuction
}
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL){
data<-read.csv("PossibMatric.CSV")
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
##End of fuction
}
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL){
data<-read.csv("PossibMatric.CSV")
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
##End of fuction
}
PosMat("09:30","TER")
PosMat(,"TER")
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL,data=read.csv("PossibMatric.CSV")){
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL,data=read.csv("PossibMatric.CSV")){
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL){
data<-read.csv("PossibMatric.CSV")
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
##End of fuction
}
PosMat<-function(Horav="all",Dia1v=NULL,Dia2v=NULL,data=read.csv("PossibMatric.CSV")){
cols<-c("Horario","Dia1","Dia2","Nome.Extenso","Dep","Creditos")
##cria a variavel d_data que sera aninhada a variavael h_data para mostrar o resultado final
##d_data depende dos valores de Dia1v e Dia2V
##Dia2v existe somente quando a cadeira é dividida em 2 dias; portando nunca existira Dia2v se Dia1v for NULL
if(is.null(Dia2v)){
d_data<-data[data$Dia1==Dia1v,]
}
else{
d_data<-data[data$Dia1==Dia1v&data$Dia2==Dia2v,cols]
}
##se o horario escolhido for "all", o resultado final será todos as cadeira disponíveis naquele semestre
if(!Horav=="all"){
h_data<-d_data[d_data$Horario==Horav,cols]
}
else{
h_data<-d_data[,cols]
message("Mostrando todas as aulas para o(S) dia(s) selecionado(s)")
}
print(h_data)
##End of fuction
}
data<-Read.csv("Possibilidades2017_01.csv")
data<-read.csv("Possibilidades2017_01.csv")
PosMat(,"TER",data=data)
PosMat(,"SEG",data=data)
PosMat(,"QUA",data=data)
PosMat(,"QUI",data=data)
PosMat(,"SEX",data=data)
read.csv("PossibMatric.CSV")
